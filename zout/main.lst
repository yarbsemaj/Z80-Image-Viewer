   1:     -	A000          	decompress	.EQU	0A000H
   2:     -	0020          	rows        .EQU	32
   3:     -	0008          	cols        .EQU	32/4
   4:				
   5:     -	000D          	CR          .EQU     0DH
   6:     -	000A          	LF          .EQU     0AH
   7:				
   8:     -	9000          		.ORG 9000H
   9:     -	9000          	printImage:
  10:    0+10	9000  218C90  		ld		HL, image           ;Load and Decompress the image
  11:   10+10	9003  1100A0  	    ld		DE,decompress
  12:   20+17	9006  CD4890  	    call    dzx0_standard
  13:				
  14:   37+7	9009  1620    	    LD      D, rows             ;Number of ROWS
  15:   44+7	900B  1E08    	    LD      E, cols             ;Number of COLS
  16:				
  17:   51+10	900D  2100A0  	    LD      HL,decompress       ;Start HL
  18:     -	9010          	mainLoop: 
  19:   61+11	9010  D5      	    PUSH    DE                  ;Store awy for later
  20:   72+12	9011  1817    	    JR      printByte           ;Print the a byte
  21:     -	9013          	printReturn:
  22:   84+6	9013  23      	    INC     HL                  ;Get the next byte
  23:   90+10	9014  D1      	    POP     DE                  ;GET DE Back
  24:  100+4	9015  43      	    LD      B,E                 ;GET Cols
  25:  104+8+5	9016  100F    	    DJNZ    saveColPos          ;Are we at the end of a row?
  26:  112+7	9018  1E08    	    LD      E, cols             ;Reset Col Position
  27:  119+7	901A  3E0D    	    LD      A, CR               ;New Line
  28:  126+11	901C  CF      	    RST     08H
  29:  137+7	901D  3E0A    	    LD      A, LF
  30:  144+11	901F  CF      	    RST     08H
  31:  155+4	9020  42      	    LD      B, D                ;Are we at the end of the file
  32:  159+8+5	9021  1001    	    DJNZ    saveRowPos          ;if not, pesist D
  33:  167+10	9023  C9      	    RET                         ;EXIT 
  34:				
  35:     -	9024          	saveRowPos:
  36:  177+4	9024  50      	    LD      D,B                 ;Persist the new D
  37:  181+12	9025  18E9    	    JR      mainLoop
  38:				
  39:     -	9027          	saveColPos:
  40:  193+4	9027  58      	    LD      E,B                 ;Persist the new E
  41:  197+12	9028  18E6    	    JR      mainLoop           
  42:				
  43:     -	902A          	printByte:
  44:  209+7	902A  4E      	    LD      C, (HL)             ;Load in the data into C for safe keeping
  45:  216+4	902B  79      	    LD      A, C                ;Move it into A so we can work on it
  46:  220+7	902C  0604    	    LD      B, 4                ;Setup the loop to pogress through the byte
  47:     -	902E          	bytePrintLoop:
  48:  227+11	902E  C5      	    PUSH    BC                  ;Save the position of the byte progress loop to the stack
  49:     -	902F          	printChar:                      ;prints the char indexed in A
  50:  238+7	902F  E603    	    AND		00000011b           ;Mask off the lower bits
  51:  245+10	9031  114E91  	    LD      DE, chars           ;Get the adress of the printout chars
  52:  255+7+5	9034  2804    	    JR      Z, endScan          ;If we have a zero, go straight to print
  53:  262+4	9036  47      	    LD      B,  A               ;If not setup a loop
  54:     -	9037          	scanChars:
  55:  266+6	9037  13      	    INC     DE                  ;For the size of A, increment through the char array (moving into lighter chars)
  56:  272+8+5	9038  10FD    	    DJNZ    scanChars 
  57:     -	903A          	endScan:
  58:  280+7	903A  1A      	    LD      A, (DE)
  59:  287+11	903B  CF      	    RST     08H                 ;print out the char
  60:  298+11	903C  CF      	    RST     08H
  61:  309+10	903D  C1      	    POP     BC                  ;Retrive the position of the byte progress loop to the stack
  62:  319+4	903E  79      	    LD      A,C                 ;Get back a clean copy of the data
  63:  323+8	903F  CB1F    	    RR      A                   ;Move to the next nibble
  64:  331+8	9041  CB1F    	    RR      A
  65:  339+4	9043  4F      	    LD      C,A                 ;Persist the shifted byte into C
  66:  343+8+5	9044  10E8    	    DJNZ    bytePrintLoop       ;Are we at the end of the byte
  67:  351+12	9046  18CB    	    JR      printReturn
  68:				    
  69:				    include 'compress.asm'
**** compress.asm ****
   1:				; -----------------------------------------------------------------------------
   2:				; ZX0 decoder by Einar Saukas & Urusergi
   3:				; "Standard" version (68 bytes only)
   4:				; -----------------------------------------------------------------------------
   5:				; Parameters:
   6:				;   HL: source address (compressed data)
   7:				;   DE: destination address (decompressing)
   8:				; -----------------------------------------------------------------------------
   9:				
  10:     -	9048          	dzx0_standard:
  11:  363+10	9048  01FFFF  	        ld      bc, $ffff               ; preserve default offset 1
  12:  373+11	904B  C5      	        push    bc
  13:  384+6	904C  03      	        inc     bc
  14:  390+7	904D  3E80    	        ld      a, $80
  15:     -	904F          	dzx0s_literals:
  16:  397+17	904F  CD7D90  	        call    dzx0s_elias             ; obtain length
  17:  414+16+5	9052  EDB0    	        ldir                            ; copy literals
  18:  430+4	9054  87      	        add     a, a                    ; copy from last offset or new offset?
  19:  434+7+5	9055  380D    	        jr      c, dzx0s_new_offset
  20:  441+17	9057  CD7D90  	        call    dzx0s_elias             ; obtain length
  21:     -	905A          	dzx0s_copy:
  22:  458+19	905A  E3      	        ex      (sp), hl                ; preserve source, restore offset
  23:  477+11	905B  E5      	        push    hl                      ; preserve offset
  24:  488+11	905C  19      	        add     hl, de                  ; calculate destination - offset
  25:  499+16+5	905D  EDB0    	        ldir                            ; copy from offset
  26:  515+10	905F  E1      	        pop     hl                      ; restore offset
  27:  525+19	9060  E3      	        ex      (sp), hl                ; preserve offset, restore source
  28:  544+4	9061  87      	        add     a, a                    ; copy from literals or new offset?
  29:  548+7+5	9062  30EB    	        jr      nc, dzx0s_literals
  30:     -	9064          	dzx0s_new_offset:
  31:  555+10	9064  C1      	        pop     bc                      ; discard last offset
  32:  565+7	9065  0EFE    	        ld      c, $fe                  ; prepare negative offset
  33:  572+17	9067  CD7E90  	        call    dzx0s_elias_loop        ; obtain offset MSB
  34:  589+4	906A  0C      	        inc     c
  35:  593+5+6	906B  C8      	        ret     z                       ; check end marker
  36:  598+4	906C  41      	        ld      b, c
  37:  602+7	906D  4E      	        ld      c, (hl)                 ; obtain offset LSB
  38:  609+6	906E  23      	        inc     hl
  39:  615+8	906F  CB18    	        rr      b                       ; last offset bit becomes first length bit
  40:  623+8	9071  CB19    	        rr      c
  41:  631+11	9073  C5      	        push    bc                      ; preserve new offset
  42:  642+10	9074  010100  	        ld      bc, 1                   ; obtain length
  43:  652+10+7	9077  D48590  	        call    nc, dzx0s_elias_backtrack
  44:  662+6	907A  03      	        inc     bc
  45:  668+12	907B  18DD    	        jr      dzx0s_copy
  46:     -	907D          	dzx0s_elias:
  47:  680+4	907D  0C      	        inc     c                       ; interlaced Elias gamma coding
  48:     -	907E          	dzx0s_elias_loop:
  49:  684+4	907E  87      	        add     a, a
  50:  688+7+5	907F  2003    	        jr      nz, dzx0s_elias_skip
  51:  695+7	9081  7E      	        ld      a, (hl)                 ; load another group of 8 bits
  52:  702+6	9082  23      	        inc     hl
  53:  708+4	9083  17      	        rla
  54:     -	9084          	dzx0s_elias_skip:
  55:  712+5+6	9084  D8      	        ret     c
  56:     -	9085          	dzx0s_elias_backtrack:
  57:  717+4	9085  87      	        add     a, a
  58:  721+8	9086  CB11    	        rl      c
  59:  729+8	9088  CB10    	        rl      b
  60:  737+12	908A  18F2    	        jr      dzx0s_elias_loop
  61:				; -----------------------------------------------------------------------------
**** main.asm ****
  70:     -	908C          	image:
  71:     -	908C ..914D 	    incbin "examples/image.bin"
  72:     -	914E  203A2A40	chars:    .BYTE   " :*@"



Statistics:

     4	passes
     0	jr promotions
    25	symbols
   338	bytes



Symbol Table:

CR             =0D        13
LF             =0A        10
bytePrintLoop   902E      36910
chars           914E      37198
cols           =08        8
decompress     =A000      40960
dzx0_standard   9048      36936
dzx0s_copy      905A      36954
dzx0s_elias     907D      36989
dzx0s_elias_backtrack 9085      36997
dzx0s_elias_loop 907E      36990
dzx0s_elias_skip 9084      36996
dzx0s_literals  904F      36943
dzx0s_new_offset 9064      36964
endScan         903A      36922
image           908C      37004
mainLoop        9010      36880
printByte       902A      36906
printChar       902F      36911
printImage      9000      36864
printReturn     9013      36883
rows           =20        32
saveColPos      9027      36903
saveRowPos      9024      36900
scanChars       9037      36919
