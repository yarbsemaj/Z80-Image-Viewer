binary-debuggable-source
0000 0000 f main.asm
0000 0000 s decompress	.EQU	0A000H		;Old Stack Location 
0000 0000 s rows        .EQU	32
0000 0000 s cols        .EQU	32/4
0000 0000 s 
0000 0000 s CR          .EQU     0DH
0000 0000 s LF          .EQU     0AH
0000 0000 s 
9000 9000 s 	.ORG 9000H
9000 9000 s printImage:
9000 9000 d 218c90
9000 9000 u 03 01
9000 9000 s 	ld		HL, image           ;Load and Decompress the image
9003 9003 d 1100a0
9003 9003 u 03 01
9003 9003 s     ld		DE,decompress
9006 9006 d cd4890
9006 9006 u 03 01
9006 9006 s     call    dzx0_standard
9009 9009 s 
9009 9009 d 1620
9009 9009 u 02 01
9009 9009 s     LD      D, rows             ;Number of ROWS
900b 900b d 1e08
900b 900b u 02 01
900b 900b s     LD      E, cols             ;Number of COLS
900d 900d s 
900d 900d d 2100a0
900d 900d u 03 01
900d 900d s     LD      HL,decompress       ;Start HL
9010 9010 s mainLoop: 
9010 9010 d d5
9010 9010 u 01 01
9010 9010 s     PUSH    DE                  ;Store awy for later
9011 9011 d 1817
9011 9011 u 02 01
9011 9011 s     JR      printByte           ;Print the a byte
9013 9013 s printReturn:
9013 9013 d 23
9013 9013 u 01 01
9013 9013 s     INC     HL                  ;Get the next byte
9014 9014 d d1
9014 9014 u 01 01
9014 9014 s     POP     DE                  ;GET DE Back
9015 9015 d 43
9015 9015 u 01 01
9015 9015 s     LD      B,E                 ;GET Cols
9016 9016 d 100f
9016 9016 u 02 01
9016 9016 s     DJNZ    saveColPos          ;Are we at the end of a row?
9018 9018 d 1e08
9018 9018 u 02 01
9018 9018 s     LD      E, cols             ;Reset Col Position
901a 901a d 3e0d
901a 901a u 02 01
901a 901a s     LD      A, CR               ;New Line
901c 901c d cf
901c 901c u 01 01
901c 901c s     RST     08H
901d 901d d 3e0a
901d 901d u 02 01
901d 901d s     LD      A, LF
901f 901f d cf
901f 901f u 01 01
901f 901f s     RST     08H
9020 9020 d 42
9020 9020 u 01 01
9020 9020 s     LD      B, D                ;Are we at the end of the file
9021 9021 d 1001
9021 9021 u 02 01
9021 9021 s     DJNZ    saveRowPos          ;if not, pesist D
9023 9023 d c9
9023 9023 u 01 01
9023 9023 s     RET                         ;EXIT 
9024 9024 s 
9024 9024 s saveRowPos:
9024 9024 d 50
9024 9024 u 01 01
9024 9024 s     LD      D,B                 ;Persist the new D
9025 9025 d 18e9
9025 9025 u 02 01
9025 9025 s     JR      mainLoop
9027 9027 s 
9027 9027 s saveColPos:
9027 9027 d 58
9027 9027 u 01 01
9027 9027 s     LD      E,B                 ;Persist the new E
9028 9028 d 18e6
9028 9028 u 02 01
9028 9028 s     JR      mainLoop           
902a 902a s 
902a 902a s printByte:
902a 902a d 4e
902a 902a u 01 01
902a 902a s     LD      C, (HL)             ;Load in the data into C for safe keeping
902b 902b d 79
902b 902b u 01 01
902b 902b s     LD      A, C                ;Move it into A so we can work on it
902c 902c d 0603
902c 902c u 02 01
902c 902c s     LD      B, 3                ;Setup the loop to pogress through the byte
902e 902e s bytePrintLoop:
902e 902e d c5
902e 902e u 01 01
902e 902e s     PUSH    BC                  ;Save the position of the byte progress loop to the stack
902f 902f s printChar:                      ;prints the char indexed in A
902f 902f d e603
902f 902f u 02 01
902f 902f s     AND		00000011b           ;Mask off the lower bits
9031 9031 d 113891
9031 9031 u 03 01
9031 9031 s     LD      DE, chars           ;Get the adress of the printout chars
9034 9034 d 2804
9034 9034 u 02 01
9034 9034 s     JR      Z, endScan          ;If we have a zero, go straight to print
9036 9036 d 47
9036 9036 u 01 01
9036 9036 s     LD      B,  A               ;If not setup a loop
9037 9037 s scanChars:
9037 9037 d 13
9037 9037 u 01 01
9037 9037 s     INC     DE                  ;For the size of A, increment through the char array (moving into lighter chars)
9038 9038 d 10fd
9038 9038 u 02 01
9038 9038 s     DJNZ    scanChars 
903a 903a s endScan:
903a 903a d 1a
903a 903a u 01 01
903a 903a s     LD      A, (DE)
903b 903b d cf
903b 903b u 01 01
903b 903b s     RST     08H                 ;print out the char
903c 903c d cf
903c 903c u 01 01
903c 903c s     RST     08H
903d 903d d c1
903d 903d u 01 01
903d 903d s     POP     BC                  ;Retrive the position of the byte progress loop to the stack
903e 903e d 79
903e 903e u 01 01
903e 903e s     LD      A,C                 ;Get back a clean copy of the data
903f 903f d cb1f
903f 903f u 02 01
903f 903f s     RR      A                   ;Move to the next nibble
9041 9041 d cb1f
9041 9041 u 02 01
9041 9041 s     RR      A
9043 9043 d 4f
9043 9043 u 01 01
9043 9043 s     LD      C,A                 ;Persist the shifted byte into C
9044 9044 d 10e8
9044 9044 u 02 01
9044 9044 s     DJNZ    bytePrintLoop       ;Are we at the end of the byte
9046 9046 d 18cb
9046 9046 u 02 01
9046 9046 s     JR      printReturn
9048 9048 s     
9048 9048 s     include 'compress.asm'
9048 9048 f compress.asm
9048 9048 s ; -----------------------------------------------------------------------------
9048 9048 s ; ZX0 decoder by Einar Saukas & Urusergi
9048 9048 s ; "Standard" version (68 bytes only)
9048 9048 s ; -----------------------------------------------------------------------------
9048 9048 s ; Parameters:
9048 9048 s ;   HL: source address (compressed data)
9048 9048 s ;   DE: destination address (decompressing)
9048 9048 s ; -----------------------------------------------------------------------------
9048 9048 s 
9048 9048 s dzx0_standard:
9048 9048 d 01ffff
9048 9048 u 03 01
9048 9048 s         ld      bc, $ffff               ; preserve default offset 1
904b 904b d c5
904b 904b u 01 01
904b 904b s         push    bc
904c 904c d 03
904c 904c u 01 01
904c 904c s         inc     bc
904d 904d d 3e80
904d 904d u 02 01
904d 904d s         ld      a, $80
904f 904f s dzx0s_literals:
904f 904f d cd7d90
904f 904f u 03 01
904f 904f s         call    dzx0s_elias             ; obtain length
9052 9052 d edb0
9052 9052 u 02 01
9052 9052 s         ldir                            ; copy literals
9054 9054 d 87
9054 9054 u 01 01
9054 9054 s         add     a, a                    ; copy from last offset or new offset?
9055 9055 d 380d
9055 9055 u 02 01
9055 9055 s         jr      c, dzx0s_new_offset
9057 9057 d cd7d90
9057 9057 u 03 01
9057 9057 s         call    dzx0s_elias             ; obtain length
905a 905a s dzx0s_copy:
905a 905a d e3
905a 905a u 01 01
905a 905a s         ex      (sp), hl                ; preserve source, restore offset
905b 905b d e5
905b 905b u 01 01
905b 905b s         push    hl                      ; preserve offset
905c 905c d 19
905c 905c u 01 01
905c 905c s         add     hl, de                  ; calculate destination - offset
905d 905d d edb0
905d 905d u 02 01
905d 905d s         ldir                            ; copy from offset
905f 905f d e1
905f 905f u 01 01
905f 905f s         pop     hl                      ; restore offset
9060 9060 d e3
9060 9060 u 01 01
9060 9060 s         ex      (sp), hl                ; preserve offset, restore source
9061 9061 d 87
9061 9061 u 01 01
9061 9061 s         add     a, a                    ; copy from literals or new offset?
9062 9062 d 30eb
9062 9062 u 02 01
9062 9062 s         jr      nc, dzx0s_literals
9064 9064 s dzx0s_new_offset:
9064 9064 d c1
9064 9064 u 01 01
9064 9064 s         pop     bc                      ; discard last offset
9065 9065 d 0efe
9065 9065 u 02 01
9065 9065 s         ld      c, $fe                  ; prepare negative offset
9067 9067 d cd7e90
9067 9067 u 03 01
9067 9067 s         call    dzx0s_elias_loop        ; obtain offset MSB
906a 906a d 0c
906a 906a u 01 01
906a 906a s         inc     c
906b 906b d c8
906b 906b u 01 01
906b 906b s         ret     z                       ; check end marker
906c 906c d 41
906c 906c u 01 01
906c 906c s         ld      b, c
906d 906d d 4e
906d 906d u 01 01
906d 906d s         ld      c, (hl)                 ; obtain offset LSB
906e 906e d 23
906e 906e u 01 01
906e 906e s         inc     hl
906f 906f d cb18
906f 906f u 02 01
906f 906f s         rr      b                       ; last offset bit becomes first length bit
9071 9071 d cb19
9071 9071 u 02 01
9071 9071 s         rr      c
9073 9073 d c5
9073 9073 u 01 01
9073 9073 s         push    bc                      ; preserve new offset
9074 9074 d 010100
9074 9074 u 03 01
9074 9074 s         ld      bc, 1                   ; obtain length
9077 9077 d d48590
9077 9077 u 03 01
9077 9077 s         call    nc, dzx0s_elias_backtrack
907a 907a d 03
907a 907a u 01 01
907a 907a s         inc     bc
907b 907b d 18dd
907b 907b u 02 01
907b 907b s         jr      dzx0s_copy
907d 907d s dzx0s_elias:
907d 907d d 0c
907d 907d u 01 01
907d 907d s         inc     c                       ; interlaced Elias gamma coding
907e 907e s dzx0s_elias_loop:
907e 907e d 87
907e 907e u 01 01
907e 907e s         add     a, a
907f 907f d 2003
907f 907f u 02 01
907f 907f s         jr      nz, dzx0s_elias_skip
9081 9081 d 7e
9081 9081 u 01 01
9081 9081 s         ld      a, (hl)                 ; load another group of 8 bits
9082 9082 d 23
9082 9082 u 01 01
9082 9082 s         inc     hl
9083 9083 d 17
9083 9083 u 01 01
9083 9083 s         rla
9084 9084 s dzx0s_elias_skip:
9084 9084 d d8
9084 9084 u 01 01
9084 9084 s         ret     c
9085 9085 s dzx0s_elias_backtrack:
9085 9085 d 87
9085 9085 u 01 01
9085 9085 s         add     a, a
9086 9086 d cb11
9086 9086 u 02 01
9086 9086 s         rl      c
9088 9088 d cb10
9088 9088 u 02 01
9088 9088 s         rl      b
908a 908a d 18f2
908a 908a u 02 01
908a 908a s         jr      dzx0s_elias_loop
908c 908c s ; -----------------------------------------------------------------------------
908c 908c f main.asm
908c 908c s image:
908c 908c s     incbin "examples/image.bin"
908c 908c d 89ff8e56fafff161bf0190826f0540fe
909c 909c d 08200b0100f982015569e562bf1489e5
90ac 90ac d 96862f50aaaa9b621b5498be6efea20b
90bc 90bc d 26fe6a980692abf99aaf0226fa9ff519
90cc 90cc d 98aaaee96640a99a6ee60950955a6a8a
90dc 90dc d 07048656194085abbed6985595ae618a
90ec 90ec d a596aafed50262fad67ab2eaeaf00182
90fc 90fc d 55aae9565a552600945188aa593ae1aa
910c 910c d 287f9895fa6aae3f41bbfee105a3f0ba
911c 911c d 4aaac106402a46e8fdf100a241281504
912c 912c d 88956a8de51aed51cbe45556
908c 908c u ac 02
9138 9138 d 203a2a40
9138 9138 u 04 02
9138 9138 s chars:    .BYTE   " :*@"
0020 v rows
9138 a chars
904f a dzx0s_literals
9084 a dzx0s_elias_skip
902a a printByte
9048 a dzx0_standard
907e a dzx0s_elias_loop
0008 v cols
a000 v decompress
000d v CR
000a v LF
9085 a dzx0s_elias_backtrack
902f a printChar
9013 a printReturn
9024 a saveRowPos
9010 a mainLoop
903a a endScan
908c a image
907d a dzx0s_elias
9037 a scanChars
902e a bytePrintLoop
9064 a dzx0s_new_offset
9027 a saveColPos
905a a dzx0s_copy
9000 a printImage
